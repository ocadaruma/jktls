apply plugin: "java-library"
apply plugin: "maven-publish"
apply plugin: "signing"

dependencies {
    testImplementation project(":testing")
}

static def targetOs() {
    def os = System.getProperty("os.name").toLowerCase()
    if (os.contains("linux")) {
        return "linux"
    }
    if (os.contains("mac os") || os.contains("darwin")) {
        return "macos"
    }
    throw new RuntimeException("platform not supported: " + System.getProperty("os.name"))
}

static def targetArch() {
    def arch = System.getProperty("os.arch").toLowerCase()
    if (arch.contains("x86_64") || arch.contains("amd64")) {
        return "x86_64"
    }
    if (arch.contains("aarch64") || arch.contains("arm64")) {
        return "aarch64"
    }
    throw new RuntimeException("architecture not supported: " + System.getProperty("os.arch"))
}

task buildNativeLib(type: Exec) {
    workingDir "../native"
    def args = ["cargo", "build", "--release"]
    commandLine args
}

task copyNativeLib(type: Copy) {
    dependsOn "buildNativeLib"
    from "../native/target/release"
    include "*.so", "*.dylib"
    rename "^libjktls", "libjktls-${targetArch()}-${targetOs()}"
    into new File(project.buildDir, "native")
}

processResources {
    dependsOn "copyNativeLib"
    from(new File(project.buildDir, "native")) {
        include "libjktls*"
    }
}

task universalJar(type: Jar) {
    dependsOn "jar"
    archiveClassifier.set("universal")
    from(zipTree(jar.outputs.files.singleFile)) {
        exclude "libjktls*"
    }
    from new File(project.buildDir, "native")
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            if (isReleaseVersion) {
                url("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            } else {
                url("https://oss.sonatype.org/content/repositories/snapshots/")
            }
            credentials {
                username findProperty("sonatypeUsername")
                password findProperty("sonatypePassword")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = "jktls"
            artifact source: universalJar, classifier: null
            artifact javadocJar
            artifact sourcesJar

            pom {
                name = 'jktls'
                description = 'Kernel TLS on Java'
                url = 'https://github.com/ocadaruma/jktls'
                scm {
                    connection = 'scm:git:git@github.com:ocadaruma/jktls.git'
                    url = 'git@github.com:ocadaruma/jktls.git'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://raw.githubusercontent.com/ocadaruma/jktls/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'ocadaruma'
                        name = 'Haruki Okada'
                    }
                }
            }
        }
    }
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.mavenJava
}
